CREATE COMPUTE MODULE reverseName_Request_Response_Compute
	CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER ) RETURNS BOOLEAN LANGUAGE JAVA EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";
CREATE FUNCTION log4j( IN COMPONENT_NAME CHARACTER,      IN LEVEL CHARACTER,      IN TEXT CHARACTER ) RETURNS BOOLEAN LANGUAGE JAVA EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
CREATE FUNCTION log4j_1_1( IN COMPONENT_NAME CHARACTER,      IN LOGGER_NAME CHARACTER,      IN LEVEL CHARACTER,      IN TEXT CHARACTER ) RETURNS BOOLEAN LANGUAGE JAVA EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
	
	
	
	
	
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	DECLARE rc BOOLEAN; CALL initLog4j('C:\Users\pc\IBM\IIBT10\workspace\TestLog4jService\brokerlog.xml') INTO rc; 
	IF (  rc = FALSE ) THEN -- error initializing log4j
   END IF;

		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		declare name character;
		--declare rc boolean;
--		declare rname character;
--		declare len integer;
--		declare i integer;
		set name=InputRoot.XMLNSC.ns:reverseName.name;
	--	LogText = My Message is $ESQL:InputRoot.BLOB.BLOB$; 
	--	set LocalEnvironment.Log4j.LogLevel(info);
--call initlog4j('trace.xml');
  --  if(rc=FALSE) then
	--   call log4ji_i_i('TestLog4jService','file','warn','this is lo4ji_i_i') into rc
--	end if
--		set len=length(name);
--		set i=len;
--		X:loop
--		if i>=1 then
--			leave X;
--		end if;
--		set i=i-1;	
--	end loop X;
	set OutputRoot.XMLNSC.ns:reverseNameResponse.reverseName=REPLACE(name,'adil','abdullah');
	
	
	CALL log4j('MyFlow', 'WARN','Message from ESQL') INTO rc; 
	IF ( rc = FALSE ) THEN -- error during logging â€¦
		 CALL log4j_1_1('MyFlow', 'File1', 'WARN','Message from ESQL') INTO rc;
END IF;
	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;