CREATE COMPUTE MODULE MoneySend_PrepareResponse

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
	/*	SET OutputRoot.XML.(XML.XmlDecl) = ''; 
			SET OutputRoot.XML.(XML.XmlDecl).(XML.Version) = '1.0'; 
			SET OutputRoot.XML.(XML.XmlDecl).(XML.Encoding) = 'UTF-8';
			--DECLARE OutputRoot.XML.Response REFERENCE to OutputRoot.XML.Response;
			 SET OutputRoot.XML.Response.ResponseCode = InputRoot.SOAP.Body.ns5:AMW_PointInquirySOAResponse.ns5:AMW_PointInquirySOAResult.ns:ResponseCode; -- 'PHX8583';
			SET OutputRoot.XML.Response.ResponseDesc=InputRoot.SOAP.Body.ns5:AMW_PointInquirySOAResponse.ns5:AMW_PointInquirySOAResult.ns:ResponseMessage; -- '01';
			SET OutputRoot.XML.Response.transactionRef = Environment.Variables.RequestReffNumber; -- '1234';
			SET OutputRoot.XML.Response.LoyaltyPointsInquiry.PointsInquiryData.Title = InputRoot.SOAP.Body.ns5:AMW_PointInquirySOAResponse.ns5:AMW_PointInquirySOAResult.ns:ResponseMessage;
			SET OutputRoot.XML.Response.LoyaltyPointsInquiry.PointsInquiryData.AvailablePoints =InputRoot.SOAP.Body.ns5:AMW_PointInquirySOAResponse.ns5:AMW_PointInquirySOAResult.ns:AvailablePoints;
			SET OutputRoot.XML.Response.LoyaltyPointsInquiry.PointsInquiryData.CustomerTier = InputRoot.SOAP.Body.ns5:AMW_PointInquirySOAResponse.ns5:AMW_PointInquirySOAResult.ns:CustomerTier;
			
			
			SET OutputRoot.XML.Response.Transfer.RequestId = '400399';
			SET OutputRoot.XML.Response.Transfer.TransactionReference = '0299999917719282101';
			SET OutputRoot.XML.Response.TransactionHistory.Transaction.Type = 'Payment';
			SET OutputRoot.XML.Response.TransactionHistory.Transaction.SystemTraceAuditNumber = '073162';
			SET OutputRoot.XML.Response.TransactionHistory.Transaction.SettlementDate = '0626';
			SET OutputRoot.XML.Response.TransactionHistory.Transaction.Response.Code = '00';
			SET OutputRoot.XML.Response.TransactionHistory.Transaction.Response.Description = 'Approved or completed successfully';
			SET OutputRoot.XML.Response.TransactionHistory.Transaction.SubmitDateTime = '2012-06-25T19:28:23Z';
			SET OutputRoot.XML.Response.SanctionScore = '123';
			*/
			
			IF InputRoot.XMLNSC.Response.ResponseCode = '00' THEN
				
				SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Response.Code = InputRoot.XMLNSC.Response.ResponseCode;	
				SET OutputRoot.JSON.Data.Transfer.RequestId = InputRoot.XMLNSC.Response.RequestId;
				--SET OutputRoot.JSON.Data.Transfer.TransactionReference = InputRoot.XMLNSC.Response.TransactionReference;
				
				SET OutputRoot.JSON.Data.Transfer.TransactionReference = SUBSTRING(InputRoot.XMLNSC.Response.TransactionReference FROM 1 FOR 13) || InputRoot.XMLNSC.Response.SystemTraceAuditNumber;
				
				SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Type = InputRoot.XMLNSC.Response.Type;
			    SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SystemTraceAuditNumber = InputRoot.XMLNSC.Response.SystemTraceAuditNumber;
			    SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SettlementDate = InputRoot.XMLNSC.Response.SettlementDate;
			    SET OutputRoot.JSON.Data.TransactionHistory.Transaction.ResponseCode = InputRoot.XMLNSC.Response.Code;
				SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Response.Description = InputRoot.XMLNSC.Response.Description;
			    SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SubmitDateTime = InputRoot.XMLNSC.Response.SubmitDateTime;
				--SET OutputRoot.JSON.Data.SanctionScore = '123';
			
			ELSEIF InputRoot.XMLNSC.Response.ResponseCode <> '00' THEN
				
				--SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Response.Code = InputRoot.XMLNSC.Response.ResponseCode;
				SET OutputRoot.JSON.Data.Transfer.ReasonCode = InputRoot.XMLNSC.Response.ResponseCode;
				SET OutputRoot.JSON.Data.Transfer.ErrorMessage = InputRoot.XMLNSC.Response.ErrorMessage;
				
			END IF;
		
		
				
			
			--
			--SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Type = 'Payment';
			--SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SystemTraceAuditNumber = '073162';
			--SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SettlementDate = '0626';
			--SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Response.Description = 'Approved or completed successfully';
			--SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SubmitDateTime = '2012-06-25T19:28:23Z';
			--SET OutputRoot.JSON.Data.SanctionScore = '123';
			
			/*
			SET OutputRoot.JSON.Data.Transfer.RequestId = '400399';
			SET OutputRoot.JSON.Data.Transfer.TransactionReference = '0299999917719282101';
			SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Type = 'Payment';
			SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SystemTraceAuditNumber = '073162';
			SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SettlementDate = '0626';
			SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Response.Code = '00';
			SET OutputRoot.JSON.Data.TransactionHistory.Transaction.Response.Description = 'Approved or completed successfully';
			SET OutputRoot.JSON.Data.TransactionHistory.Transaction.SubmitDateTime = '2012-06-25T19:28:23Z';
			SET OutputRoot.JSON.Data.SanctionScore = '123'; 
			*/
					
			/*
			<Transfer>
    <RequestId>400399</RequestId>
    <TransactionReference>0299999917719282101</TransactionReference>
    <TransactionHistory>
        <Transaction>
            <Type>PAYMENT</Type>
            <SystemTraceAuditNumber>073162</SystemTraceAuditNumber>
            <NetworkReferenceNumber>412371237</NetworkReferenceNumber>
            <SettlementDate>0626</SettlementDate>
            <Response>
                <Code>00</Code>
                <Description>Approved or completed successfully</Description>
            </Response>
            <SubmitDateTime>2012-06-25T19:28:23Z</SubmitDateTime>
            </Transaction>
      </TransactionHistory>
      <SanctionScore>123</SanctionScore>
</Transfer>
		*/
		
						DECLARE rc BOOLEAN; 
		declare ch BLOB;
		declare ch1 CHARACTER;
	
		CALL initLog4j('brokerlog.xml') 
		INTO rc; 
		IF (  rc = FALSE ) THEN 
	   	
		END IF;
     --     set OutputRoot=InputRoot;		
	--	set ch=cast(InputRoot as character);
		          --    set ch=ASBITSTREAM(decodedInputBlob CCSID 1208);
 -- set ch1=CAST(ch as char CCSID InputRoot.Properties.CodedCharSetId Encoding InputRoot.Properties.Encoding);
  
 -- set ch1=CAST(ch as character CCSID InputRoot.Properties.CodedCharSetId);
  
 set ch1=CAST(ch as character ccsid 1208);
  
CALL log4j_1_1('MoneySend','PREPARERESPONSE','INFO','Prepare Response Node Test Log') INTO rc;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;